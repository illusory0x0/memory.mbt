package tonyfettes/memory

// Values
let byte : Size

let double : Size

let float : Size

fn free[T](Memory[T]) -> Unit

let int : Size

let int64 : Size

fn malloc[T : Sized](Int) -> Memory[T]

fn realloc[T : Sized](Memory[T], Int) -> Memory[T]

fn sizeof(Size) -> Int

let uint : Size

let uint64 : Size

// Types and methods
type Memory
impl Memory {
  get[T : Get](Self[T], Int) -> T
  length[T : Sized](Self[T]) -> Int
  of_array[T : Sized + Set](FixedArray[T]) -> Self[T]
  of_string(String) -> Self[Byte]
  op_get[T : Sized + Get](Self[T], Int) -> T
  op_set[T : Sized + Set](Self[T], Int, T) -> Unit
  set[T : Set](Self[T], Int, T) -> Unit
  to_array[T : Sized + Get](Self[T]) -> FixedArray[T]
  to_int[T](Self[T]) -> Int
  to_string(Self[Byte]) -> String
}

type Size

// Type aliases

// Traits
trait Get
impl Get for Byte
impl Get for Int
impl Get for Int64
impl Get for UInt
impl Get for UInt64
impl Get for Float
impl Get for Double

trait Set
impl Set for Byte
impl Set for Int
impl Set for Int64
impl Set for UInt
impl Set for UInt64
impl Set for Float
impl Set for Double

pub(open) trait Sized {
  size() -> Int
}
impl Sized for Byte
impl Sized for Int
impl Sized for Int64
impl Sized for UInt
impl Sized for UInt64
impl Sized for Float
impl Sized for Double

