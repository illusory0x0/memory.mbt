package tonyfettes/memory

// Values
fn byte_array2ptr(FixedArray[Byte]) -> Int

fn double_array2ptr(FixedArray[Double]) -> Int

fn float_array2ptr(FixedArray[Float]) -> Int

fn free[T](Ptr[T]) -> Unit

fn int64_array2ptr(FixedArray[Int64]) -> Int

fn int_array2ptr(FixedArray[Int]) -> Int

fn malloc[T : Sized](Int) -> Ptr[T]

fn ptr2byte_array(Int, Int) -> FixedArray[Byte]

fn ptr2double_array(Int, Int) -> FixedArray[Double]

fn ptr2float_array(Int, Int) -> FixedArray[Float]

fn ptr2int64_array(Int, Int) -> FixedArray[Int64]

fn ptr2int_array(Int, Int) -> FixedArray[Int]

fn ptr2str(Int, Int) -> String

fn ptr2uint64_array(Int, Int) -> FixedArray[UInt64]

fn ptr2uint_array(Int, Int) -> FixedArray[UInt]

fn realloc[T : Sized](Ptr[T], Int) -> Ptr[T]

fn str2ptr(String) -> Int

fn uint64_array2ptr(FixedArray[UInt64]) -> Int

fn uint_array2ptr(FixedArray[UInt]) -> Int

// Types and methods
type Ptr
impl Ptr {
  add[T : Sized](Self[T], Int) -> Self[T]
  as_int[T](Self[T]) -> Int
  load[T : Load](Self[T]) -> T
  of_array[T : Sized + Store](FixedArray[T]) -> Self[T]
  op_get[T : Sized + Load](Self[T], Int) -> T
  op_set[T : Sized + Store](Self[T], Int, T) -> Unit
  store[T : Store](Self[T], T) -> Unit
  to_array[T : Sized + Load + Default](Self[T], Int) -> FixedArray[T]
}

// Type aliases

// Traits
trait Load

pub(open) trait Sized {
  size() -> Int
}
impl Sized for Unit
impl Sized for Byte
impl Sized for Int
impl Sized for Int64
impl Sized for Float
impl Sized for Double

trait Store

